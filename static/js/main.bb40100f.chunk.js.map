{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","onChange","value","type","App","useState","setMonsters","search","setSearch","useEffect","fetch","then","res","json","users","catch","err","console","log","filterMonsters","useCallback","filter","toLocaleLowerCase","includes","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mRAceA,G,cAXF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACb,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCIHC,EANE,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAAiB,yBAAKP,UAAU,aAC9CQ,IAAID,GAAU,SAACR,GAAD,OACb,kBAAC,EAAD,CAAMU,IAAKV,EAAQI,GAAIJ,QAASA,SCCrBW,G,OANG,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MACzC,OACE,2BAAOb,UAAU,SAASc,KAAK,SAASH,YAAaA,EAAaC,SAAUA,EAAUC,MAAOA,MC8BlFE,MA7Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNT,EADM,KACIU,EADJ,OAEeD,mBAAS,IAFxB,mBAENE,EAFM,KAEEC,EAFF,KAIbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIR,EAAYQ,MAC1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IAEH,IAIMG,EAAiBC,uBAAY,WACjC,OAAOxB,EAASyB,QAAO,SAACjC,GAAD,OAAcA,EAAQK,KAAK6B,oBAAoBC,SAAShB,EAAOe,0BACrF,CAACf,IAEJ,OACE,yBAAKlB,UAAU,OACb,kDACA,kBAAC,EAAD,CAAWc,KAAK,SAASH,YAAY,kBAAkBC,SAXpC,SAACuB,GACtBhB,EAAUgB,EAAEC,OAAOvB,QAUgEA,MAAOK,IACxF,kBAAC,EAAD,CAAUX,SAAUW,EAASY,IAAmBvB,MCjBlC8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.bb40100f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nconst Card = ({monster}) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from \"react\";\r\nimport map from 'lodash/map';\r\nimport './card-list.styles.css'\r\n\r\nimport Card from \"../card/card.component\";\r\n\r\nconst CardList = ({monsters}) => (<div className='card-list'>\r\n  {map(monsters, (monster) => (\r\n    <Card key={monster.id} monster={monster}/>\r\n  ))}\r\n</div>)\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({placeholder, onChange, value})=>{\r\n  return(\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={onChange} value={value}/>\r\n  )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {useCallback, useEffect, useState} from 'react';\n\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => setMonsters(users))\n      .catch(err => console.log(err));\n  }, []);\n\n  const handleOnChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const filterMonsters = useCallback(() => {\n    return monsters.filter((monster) =>  monster.name.toLocaleLowerCase().includes(search.toLocaleLowerCase()));\n  }, [search]);\n\n  return (\n    <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox type=\"search\" placeholder=\"search monsters\" onChange={handleOnChange} value={search}/>\n      <CardList monsters={search ? filterMonsters() : monsters}>\n      </CardList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}